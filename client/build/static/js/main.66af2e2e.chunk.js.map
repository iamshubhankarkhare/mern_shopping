{"version":3,"sources":["components/AppNavbar.jsx","actions/itemActions.js","actions/types.js","components/ShoppingList.jsx","components/ItemModal.jsx","reducers/itemReducer.js","reducers/index.js","store.js","App.js","serviceWorker.js","index.js"],"names":["AppNavbar","state","isOpen","toggle","setState","Navbar","color","expand","className","Container","NavbarBrand","href","NavbarToggler","onClick","this","Collapse","navbar","Nav","NavItem","NavLink","Component","setItemsLoading","type","ShoppingList","onDeleteClick","id","props","deleteItem","getItems","items","item","ListGroup","TransitionGroup","map","_id","name","CSSTransition","key","timeout","classNames","ListGroupItem","Button","size","bind","connect","dispatch","axios","get","then","res","payload","data","delete","ItemModal","modal","onChange","e","target","value","onSubmit","preventDefault","newItem","addItem","style","marginBottom","Modal","ModalHeader","ModalBody","Form","FormGroup","Label","for","Input","placeholder","marginTop","block","post","initialState","loading","combineReducers","action","filter","middleware","thunk","store","createStore","rootReducer","compose","applyMiddleware","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"mTAIqBA,E,4MACjBC,MAAQ,CACJC,QAAQ,G,EAEZC,OAAS,WACL,EAAKC,SAAS,CACVF,QAAS,EAAKD,MAAMC,U,uDAOxB,OACI,6BACI,kBAACG,EAAA,EAAD,CAAQC,MAAM,OAAOC,OAAO,KAAKC,UAAU,QACvC,kBAACC,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAAaC,KAAK,KAAlB,iBACA,kBAACC,EAAA,EAAD,CAAeC,QAASC,KAAKX,SAC7B,kBAACY,EAAA,EAAD,CAAUb,OAAQY,KAAKb,MAAMC,OAAQc,QAAM,IAC3C,kBAACC,EAAA,EAAD,CAAKT,UAAU,UAAUQ,QAAM,GAC3B,kBAACE,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAASR,KAAK,uDAAd,mB,GAtBOS,a,kECwB1BC,EAAkB,WAC3B,MAAO,CACHC,KC3BqB,kBCKvBC,E,4MAKFC,cAAgB,SAACC,GACb,EAAKC,MAAMC,WAAWF,I,kEAHtBX,KAAKY,MAAME,a,+BAOL,IAAD,OACGC,EAAUf,KAAKY,MAAMI,KAArBD,MACR,OACI,kBAACpB,EAAA,EAAD,KAEI,kBAACsB,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAAiBxB,UAAU,kBACtBqB,EAAMI,KAAI,gBAAGC,EAAH,EAAGA,IAAKC,EAAR,EAAQA,KAAR,OACP,kBAACC,EAAA,EAAD,CAAeC,IAAKH,EAAKI,QAAS,IAAKC,WAAW,QAC9C,kBAACC,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAAQjC,UAAU,aAAaF,MAAM,SAASoC,KAAK,KAC/C7B,QAAS,EAAKW,cAAcmB,KAAK,EAAMT,IAD3C,QAECC,c,GAtBVf,aA6CZwB,eALS,SAAC3C,GAAD,MAAY,CAChC6B,KAAM7B,EAAM6B,QAIwB,CAAEF,SFjDlB,kBAAM,SAAAiB,GAC1BA,EAASxB,KACTyB,IAAMC,IAAI,cAAcC,MAAK,SAAAC,GAAG,OAC5BJ,EAAS,CACLvB,KCRa,YDSb4B,QAASD,EAAIE,YE4C2BxB,WFzC1B,SAACF,GAAD,OAAQ,SAAAoB,GAC9BC,IAAMM,OAAN,oBAA0B3B,IAAMuB,MAAK,SAAAC,GAAG,OACpCJ,EAAS,CACLvB,KCbe,cDcf4B,QAASzB,UEqCNmB,CAAmDrB,G,gEC9C5D8B,E,4MACFpD,MAAQ,CACJqD,OAAO,EACPnB,KAAM,I,EAEVhC,OAAS,WACL,EAAKC,SAAS,CACVkD,OAAQ,EAAKrD,MAAMqD,S,EAG3BC,SAAW,SAACC,GACR,EAAKpD,SAAL,eAAiBoD,EAAEC,OAAOtB,KAAOqB,EAAEC,OAAOC,S,EAG9CC,SAAW,SAACH,GACRA,EAAEI,iBACF,IAAMC,EAAU,CACZ1B,KAAM,EAAKlC,MAAMkC,MAErB,EAAKT,MAAMoC,QAAQD,GAEnB,EAAK1D,U,uDAIL,OACI,6BACI,kBAACsC,EAAA,EAAD,CAAQnC,MAAM,OAAOyD,MAAO,CAAEC,aAAc,QAAUnD,QAASC,KAAKX,QAApE,YAIA,kBAAC8D,EAAA,EAAD,CACI/D,OAAQY,KAAKb,MAAMqD,MACnBnD,OAAQW,KAAKX,QACb,kBAAC+D,EAAA,EAAD,CAAa/D,OAAQW,KAAKX,QAA1B,wBAEA,kBAACgE,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAAMT,SAAU7C,KAAK6C,UACjB,kBAACU,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAAOC,IAAI,QACP,kBAACC,EAAA,EAAD,CAAOlD,KAAK,OAAOa,KAAK,OAAOV,GAAG,OAAOgD,YAAY,sBAAsBlB,SAAUzC,KAAKyC,WAG1F,kBAACd,EAAA,EAAD,CACInC,MAAM,OACNyD,MAAO,CAAEW,UAAW,QAAUC,OAAK,GAFvC,sB,GA3CZvD,aAmETwB,eAJS,SAAA3C,GAAK,MAAK,CAC9B6B,KAAM7B,EAAM6B,QAGwB,CAAEgC,QHvDnB,SAAChC,GAAD,OAAU,SAAAe,GAC7BC,IAAM8B,KAAK,YAAa9C,GACnBkB,MAAK,SAAAC,GAAG,OACLJ,EAAS,CACLvB,KCtBQ,WDuBR4B,QAASD,EAAIE,aGkDdP,CAAsCS,G,gCCvE/CwB,EAAe,CACjBhD,MAAO,GACPiD,SAAS,GCFEC,cAAgB,CAC3BjD,KDIW,WAAyC,IAA/B7B,EAA8B,uDAAtB4E,EAAcG,EAAQ,uCACnD,OAAQA,EAAO1D,MACX,IHViB,YGWb,OAAO,2BACArB,GADP,IAEI4B,MAAOmD,EAAO9B,QACd4B,SAAS,IAEjB,IHdmB,cGef,OAAO,2BACA7E,GADP,IAEI4B,MAAO5B,EAAM4B,MAAMoD,QAAO,SAAAnD,GAAI,OAAIA,EAAKI,MAAQ8C,EAAO9B,aAE9D,IHpBgB,WGqBZ,OAAO,2BACAjD,GADP,IAEI4B,MAAM,CAAEmD,EAAO9B,SAAV,mBAAsBjD,EAAM4B,UAEzC,IHvBqB,gBGwBjB,OAAO,2BACA5B,GADP,IAEI6E,SAAS,IAEjB,QACI,OAAO7E,MEzBbiF,EAAa,CAACC,KAOLC,EALDC,YAAYC,EAJL,GAIgCC,YACjDC,IAAe,WAAf,EAAmBN,GAAuI,KCc/IO,MAdf,WACI,OACI,kBAAC,IAAD,CAAUL,MAAOA,GACb,yBAAK5E,UAAU,OACX,kBAAC,EAAD,MACA,kBAACC,EAAA,EAAD,KACI,kBAAC,EAAD,MACA,kBAAC,EAAD,UCLAiF,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OACL,kBAAC,IAAMC,WAAP,KACI,kBAAC,EAAD,OAEJC,SAASC,eAAe,SD0HtB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBtD,MAAK,SAAAuD,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.66af2e2e.chunk.js","sourcesContent":["import React, { Component } from 'react'\nimport { Collapse, Navbar, NavbarToggler, NavbarBrand, Nav, NavItem, NavLink, Container } from 'reactstrap'\n\n\nexport default class AppNavbar extends Component {\n    state = {\n        isOpen: false\n    }\n    toggle = () => {\n        this.setState({\n            isOpen: !this.state.isOpen\n        })\n    }\n\n\n\n    render() {\n        return (\n            <div>\n                <Navbar color=\"dark\" expand=\"sm\" className=\"mb-5\">\n                    <Container>\n                        <NavbarBrand href=\"/\">Shopping List</NavbarBrand>\n                        <NavbarToggler onClick={this.toggle}></NavbarToggler>\n                        <Collapse isOpen={this.state.isOpen} navbar></Collapse>\n                        <Nav className=\"ml-auto\" navbar>\n                            <NavItem>\n                                <NavLink href=\"https://github.com/iamshubhankarkhare/mern_shopping\">Github</NavLink>\n                            </NavItem>\n                        </Nav>\n                    </Container>\n                </Navbar>\n            </div>\n        )\n    }\n}\n","import axios from 'axios'\n\nimport { GET_ITEMS, ADD_ITEM, DELETE_ITEM, ITEMS_LOADING } from './types'\n\nexport const getItems = () => dispatch => {\n    dispatch(setItemsLoading());\n    axios.get('/api/items').then(res =>\n        dispatch({\n            type: GET_ITEMS,\n            payload: res.data\n        }))\n}\nexport const deleteItem = (id) => dispatch => {\n    axios.delete(`api/items/${id}`).then(res =>\n        dispatch({\n            type: DELETE_ITEM,\n            payload: id\n        }))\n}\nexport const addItem = (item) => dispatch => {\n    axios.post('api/items', item)\n        .then(res =>\n            dispatch({\n                type: ADD_ITEM,\n                payload: res.data\n            })\n        )\n}\nexport const setItemsLoading = () => {\n    return {\n        type: ITEMS_LOADING,\n    }\n}","export const GET_ITEMS = 'GET_ITEMS'\nexport const ADD_ITEM = 'ADD_ITEM'\nexport const DELETE_ITEM = 'DELETE_ITEM'\nexport const ITEMS_LOADING = 'ITEMS_LOADING'","import React, { Component } from 'react'\nimport { Container, ListGroup, ListGroupItem, Button } from 'reactstrap'\nimport { CSSTransition, TransitionGroup } from 'react-transition-group'\nimport { connect } from 'react-redux'\nimport { getItems, deleteItem } from '../actions/itemActions'\nimport PropTypes from 'prop-types'\n\n\nclass ShoppingList extends Component {\n\n    componentDidMount() {\n        this.props.getItems();\n    }\n    onDeleteClick = (id) => {\n        this.props.deleteItem(id);\n\n    }\n\n    render() {\n        const { items } = this.props.item;\n        return (\n            <Container>\n\n                <ListGroup>\n                    <TransitionGroup className=\"shopping--list\">\n                        {items.map(({ _id, name }) => (\n                            <CSSTransition key={_id} timeout={500} classNames=\"fade\">\n                                <ListGroupItem>\n                                    <Button className=\"remove-btn\" color=\"danger\" size=\"sm\"\n                                        onClick={this.onDeleteClick.bind(this, _id)}>&times;</Button>\n                                    {name}\n                                </ListGroupItem>\n\n                            </CSSTransition>\n                        ))}\n                    </TransitionGroup>\n\n                </ListGroup>\n            </Container>\n        )\n    }\n}\n\nShoppingList.propTypes = {\n    getItems: PropTypes.func.isRequired,\n    item: PropTypes.object.isRequired\n}\n\nconst mapStateToProps = (state) => ({\n    item: state.item\n\n})\n\nexport default connect(mapStateToProps, { getItems, deleteItem })(ShoppingList)\n","import React, { Component } from 'react'\nimport { Button, Modal, ModalHeader, ModalBody, Form, FormGroup, Label, Input } from 'reactstrap'\nimport { connect } from 'react-redux'\nimport { addItem } from '../actions/itemActions'\n\n\n\nclass ItemModal extends Component {\n    state = {\n        modal: false,\n        name: \"\"\n    }\n    toggle = () => {\n        this.setState({\n            modal: !this.state.modal\n        })\n    }\n    onChange = (e) => {\n        this.setState({ [e.target.name]: e.target.value })\n    }\n\n    onSubmit = (e) => {\n        e.preventDefault();\n        const newItem = {\n            name: this.state.name\n        }\n        this.props.addItem(newItem);\n\n        this.toggle();\n\n    }\n    render() {\n        return (\n            <div>\n                <Button color=\"dark\" style={{ marginBottom: '2rem' }} onClick={this.toggle}>\n                    Add item\n                </Button>\n\n                <Modal\n                    isOpen={this.state.modal}\n                    toggle={this.toggle}>\n                    <ModalHeader toggle={this.toggle}>Add to shopping list</ModalHeader>\n\n                    <ModalBody>\n                        <Form onSubmit={this.onSubmit}>\n                            <FormGroup>\n                                <Label for=\"item\">\n                                    <Input type=\"text\" name=\"name\" id=\"item\" placeholder=\"Add shopping item..\" onChange={this.onChange} >\n\n                                    </Input>\n                                    <Button\n                                        color=\"dark\"\n                                        style={{ marginTop: '2rem' }} block>\n                                        Add item\n                                    </Button>\n\n                                </Label>\n                            </FormGroup>\n                        </Form>\n                    </ModalBody>\n\n\n                </Modal>\n\n\n            </div>\n        )\n    }\n}\n\nconst mapStateToProps = state => ({\n    item: state.item\n}\n)\nexport default connect(mapStateToProps, { addItem })(ItemModal)\n","import { GET_ITEMS, ADD_ITEM, DELETE_ITEM, ITEMS_LOADING } from '../actions/types'\n\n\nconst initialState = {\n    items: [],\n    loading: false\n}\n\nexport default function (state = initialState, action) {\n    switch (action.type) {\n        case GET_ITEMS:\n            return {\n                ...state,\n                items: action.payload,\n                loading: false\n            }\n        case DELETE_ITEM:\n            return {\n                ...state,\n                items: state.items.filter(item => item._id !== action.payload)\n            }\n        case ADD_ITEM:\n            return {\n                ...state,\n                items: [action.payload, ...state.items]\n            }\n        case ITEMS_LOADING:\n            return {\n                ...state,\n                loading: true\n            }\n        default:\n            return state;\n    }\n\n}\n\n\n\n\n","import { combineReducers } from 'redux'\nimport itemReducer from './itemReducer'\n\nexport default combineReducers({\n    item: itemReducer\n})","import { createStore, applyMiddleware, compose } from 'redux'\nimport thunk from 'redux-thunk'\nimport rootReducer from './reducers'\n\n\nconst initialState = {};\n\nconst middleware = [thunk];\n\nconst store = createStore(rootReducer, initialState, compose(\n    applyMiddleware(...middleware), (process.env.NODE_ENV !== 'production' ? (window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()) : '')\n\n));\n\nexport default store;","import React from \"react\";\nimport \"./App.css\";\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport AppNavbar from './components/AppNavbar'\nimport ShoppingList from './components/ShoppingList'\nimport ItemModal from './components/ItemModal'\nimport { Provider } from 'react-redux'\nimport store from './store'\nimport { Container } from 'reactstrap'\n\nfunction App() {\n    return (\n        <Provider store={store}>\n            <div className=\"App\" >\n                <AppNavbar></AppNavbar>\n                <Container>\n                    <ItemModal></ItemModal>\n                    <ShoppingList></ShoppingList>\n                </Container>\n            </div>\n        </Provider>\n    );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById(\"root\")\n);\n\nserviceWorker.unregister();"],"sourceRoot":""}